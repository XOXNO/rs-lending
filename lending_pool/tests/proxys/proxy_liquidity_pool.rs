// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct LiquidityPoolProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for LiquidityPoolProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = LiquidityPoolProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        LiquidityPoolProxyMethods { wrapped_tx: tx }
    }
}

pub struct LiquidityPoolProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> LiquidityPoolProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
        Arg4: ProxyArg<BigUint<Env::Api>>,
        Arg5: ProxyArg<BigUint<Env::Api>>,
        Arg6: ProxyArg<BigUint<Env::Api>>,
        Arg7: ProxyArg<usize>,
    >(
        self,
        asset: Arg0,
        r_max: Arg1,
        r_base: Arg2,
        r_slope1: Arg3,
        r_slope2: Arg4,
        u_optimal: Arg5,
        reserve_factor: Arg6,
        decimals: Arg7,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&asset)
            .argument(&r_max)
            .argument(&r_base)
            .argument(&r_slope1)
            .argument(&r_slope2)
            .argument(&u_optimal)
            .argument(&reserve_factor)
            .argument(&decimals)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LiquidityPoolProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
        Arg4: ProxyArg<BigUint<Env::Api>>,
        Arg5: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        r_max: Arg0,
        r_base: Arg1,
        r_slope1: Arg2,
        r_slope2: Arg3,
        u_optimal: Arg4,
        reserve_factor: Arg5,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .argument(&r_max)
            .argument(&r_base)
            .argument(&r_slope1)
            .argument(&r_slope2)
            .argument(&u_optimal)
            .argument(&reserve_factor)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LiquidityPoolProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    /// Returns the pool asset. 
    ///  
    /// # Returns 
    /// - `EgldOrEsdtTokenIdentifier`: The pool asset. 
    pub fn pool_asset(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, EgldOrEsdtTokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPoolAsset")
            .original_result()
    }

    /// Returns the reserves. 
    /// Reserves are the amount of tokens that are currently in the pool available for borrowing or withdrawing. 
    ///  
    /// # Returns 
    /// - `BigUint`: The reserves. 
    pub fn reserves(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getReserves")
            .original_result()
    }

    /// Returns the supplied amount. 
    /// Supplied amount is the amount of tokens that were supplied to the pool. 
    ///  
    /// # Returns 
    /// - `BigUint`: The supplied amount. 
    pub fn supplied_amount(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSuppliedAmount")
            .original_result()
    }

    /// Returns the rewards reserves. 
    /// Rewards reserves are the amount of tokens that were earned by the protocol from the borrowers debt repayments. 
    ///  
    /// # Returns 
    /// - `BigUint`: The rewards reserves. 
    pub fn protocol_revenue(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getProtocolRevenue")
            .original_result()
    }

    /// Returns the borrowed amount. 
    /// Borrowed amount is the amount of tokens that were borrowed from the pool. 
    ///  
    /// # Returns 
    /// - `BigUint`: The borrowed amount. 
    pub fn borrowed_amount(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalBorrow")
            .original_result()
    }

    /// Returns the pool parameters. 
    /// Pool parameters are the parameters of the pool. 
    ///  
    /// # Returns 
    /// - `PoolParams<Self::Api>`: The pool parameters. 
    pub fn pool_params(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, common_structs::PoolParams<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPoolParams")
            .original_result()
    }

    /// Returns the borrow index. 
    /// Borrow index is the index of the borrow rate. 
    /// It is used to calculate the debt accrued by the borrowers. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The borrow index. 
    pub fn borrow_index(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getBorrowIndex")
            .original_result()
    }

    /// Returns the supply index. 
    /// Supply index is the index of the supply rate. 
    /// It is used to calculate the interest earned by the suppliers. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The supply index. 
    pub fn supply_index(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSupplyIndex")
            .original_result()
    }

    /// Returns the last update timestamp. 
    /// Last update timestamp is the last time when the indexes were updated. 
    ///  
    /// # Returns 
    /// - `u64`: The last update timestamp. 
    pub fn last_update_timestamp(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLastUpdateTimestamp")
            .original_result()
    }

    /// Updates the indexes of the pool. 
    ///  
    /// # Parameters 
    /// - `asset_price`: The price of the asset. 
    pub fn update_indexes<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        asset_price: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("updateIndexes")
            .argument(&asset_price)
            .original_result()
    }

    /// Updates the position with interest. 
    ///  
    /// # Parameters 
    /// - `position`: The position to update. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Returns 
    /// - `AccountPosition<Self::Api>`: The updated position. 
    pub fn update_position_with_interest<
        Arg0: ProxyArg<common_structs::AccountPosition<Env::Api>>,
        Arg1: ProxyArg<OptionalValue<BigUint<Env::Api>>>,
    >(
        self,
        position: Arg0,
        asset_price: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, common_structs::AccountPosition<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("updatePositionInterest")
            .argument(&position)
            .argument(&asset_price)
            .original_result()
    }

    /// Supplies liquidity to the pool. 
    ///  
    /// # Parameters 
    /// - `deposit_position`: The position to update. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Payment 
    /// - `*`: The asset to deposit, has to be the same as the pool asset. 
    ///  
    /// # Returns 
    /// - `AccountPosition<Self::Api>`: The updated position. 
    pub fn supply<
        Arg0: ProxyArg<common_structs::AccountPosition<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        deposit_position: Arg0,
        asset_price: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, common_structs::AccountPosition<Env::Api>> {
        self.wrapped_tx
            .raw_call("supply")
            .argument(&deposit_position)
            .argument(&asset_price)
            .original_result()
    }

    /// Borrows liquidity from the pool. 
    ///  
    /// # Parameters 
    /// - `initial_caller`: The address of the caller. 
    /// - `borrow_amount`: The amount of the asset to borrow. 
    /// - `existing_borrow_position`: The position to update. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Payment 
    /// - `*`: The asset to borrow, has to be the same as the pool asset. 
    ///  
    /// # Returns 
    /// - `AccountPosition<Self::Api>`: The updated position. 
    pub fn borrow<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<common_structs::AccountPosition<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        initial_caller: Arg0,
        borrow_amount: Arg1,
        borrow_position: Arg2,
        asset_price: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, common_structs::AccountPosition<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("borrow")
            .argument(&initial_caller)
            .argument(&borrow_amount)
            .argument(&borrow_position)
            .argument(&asset_price)
            .original_result()
    }

    /// Withdraws liquidity from the pool. 
    ///  
    /// # Parameters 
    /// - `initial_caller`: The address of the caller. 
    /// - `amount`: The amount of the asset to withdraw. 
    /// - `mut deposit_position`: The position to update. 
    /// - `is_liquidation`: Whether the withdrawal is a liquidation. 
    /// - `protocol_liquidation_fee`: The protocol liquidation fee. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Returns 
    /// - `AccountPosition<Self::Api>`: The updated position. 
    pub fn withdraw<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<common_structs::AccountPosition<Env::Api>>,
        Arg3: ProxyArg<bool>,
        Arg4: ProxyArg<BigUint<Env::Api>>,
        Arg5: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        initial_caller: Arg0,
        amount: Arg1,
        deposit_position: Arg2,
        is_liquidation: Arg3,
        protocol_liquidation_fee: Arg4,
        asset_price: Arg5,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, common_structs::AccountPosition<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("withdraw")
            .argument(&initial_caller)
            .argument(&amount)
            .argument(&deposit_position)
            .argument(&is_liquidation)
            .argument(&protocol_liquidation_fee)
            .argument(&asset_price)
            .original_result()
    }

    /// Repays a borrow position. 
    ///  
    /// # Parameters 
    /// - `initial_caller`: The address of the caller. 
    /// - `mut borrow_position`: The position to update. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Payment 
    /// - `*`: The asset to repay, has to be the same as the pool asset. 
    ///  
    /// # Returns 
    /// - `AccountPosition<Self::Api>`: The updated position. 
    /// -  Extra amount is sent back to the caller if the repayment is greater than the total owed. 
    pub fn repay<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<common_structs::AccountPosition<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        initial_caller: Arg0,
        position: Arg1,
        asset_price: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, common_structs::AccountPosition<Env::Api>> {
        self.wrapped_tx
            .raw_call("repay")
            .argument(&initial_caller)
            .argument(&position)
            .argument(&asset_price)
            .original_result()
    }

    /// Handles a flash loan. 
    ///  
    /// # Parameters 
    /// - `borrowed_token`: The token to borrow. 
    /// - `amount`: The amount of the token to borrow. 
    /// - `contract_address`: The address of the contract to call. 
    /// - `endpoint`: The endpoint to call. 
    /// - `arguments`: The arguments to pass to the endpoint. 
    /// - `fees`: The fees to pay for the flash loan. 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    pub fn flash_loan<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<ManagedAddress<Env::Api>>,
        Arg3: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg4: ProxyArg<ManagedArgBuffer<Env::Api>>,
        Arg5: ProxyArg<BigUint<Env::Api>>,
        Arg6: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        borrowed_token: Arg0,
        amount: Arg1,
        contract_address: Arg2,
        endpoint: Arg3,
        arguments: Arg4,
        fees: Arg5,
        asset_price: Arg6,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("flashLoan")
            .argument(&borrowed_token)
            .argument(&amount)
            .argument(&contract_address)
            .argument(&endpoint)
            .argument(&arguments)
            .argument(&fees)
            .argument(&asset_price)
            .original_result()
    }

    pub fn internal_create_strategy<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        token: Arg0,
        amount: Arg1,
        fee: Arg2,
        asset_price: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, (BigUint<Env::Api>, u64)> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createStrategy")
            .argument(&token)
            .argument(&amount)
            .argument(&fee)
            .argument(&asset_price)
            .original_result()
    }

    /// Adds vault liquidation rewards to the pool. 
    ///  
    /// # Parameters 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Payment 
    /// - `*`: The asset to add, has to be the same as the pool asset. 
    pub fn add_external_protocol_revenue<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        asset_price: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("addExternalProtocolRevenue")
            .argument(&asset_price)
            .original_result()
    }

    /// Claims the revenue of the pool. 
    ///  
    /// # Parameters 
    /// - `asset_price`: The price of the asset, used to update the market state event. 
    ///  
    /// # Returns 
    /// - `EgldOrEsdtTokenPayment<Self::Api>`: The payment of the revenue. 
    pub fn claim_revenue<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        asset_price: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, EgldOrEsdtTokenPayment<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimRevenue")
            .argument(&asset_price)
            .original_result()
    }

    /// Returns the capital utilisation of the pool. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The capital utilisation. 
    pub fn get_capital_utilisation(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCapitalUtilisation")
            .original_result()
    }

    /// Returns the total capital of the pool. 
    /// Total capital is the sum of the reserves and the borrowed amount. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The total capital. 
    pub fn get_total_capital(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalCapital")
            .original_result()
    }

    /// Returns the total interest earned (compound) for the borrowers. 
    ///  
    /// # Parameters 
    /// - `amount`: The amount of tokens to calculate the interest for. 
    /// - `initial_borrow_index`: The initial borrow index, which is the index at the time of the borrow from the position metadata. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The total interest earned. 
    pub fn get_debt_interest<
        Arg0: ProxyArg<ManagedDecimal<Env::Api, usize>>,
        Arg1: ProxyArg<ManagedDecimal<Env::Api, usize>>,
    >(
        self,
        amount: Arg0,
        initial_borrow_index: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDebtInterest")
            .argument(&amount)
            .argument(&initial_borrow_index)
            .original_result()
    }

    /// Returns the deposit rate of the pool. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The deposit rate. 
    pub fn get_deposit_rate(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDepositRate")
            .original_result()
    }

    /// Returns the borrow rate of the pool. 
    ///  
    /// # Returns 
    /// - `ManagedDecimal<Self::Api, NumDecimals>`: The borrow rate. 
    pub fn get_borrow_rate(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedDecimal<Env::Api, usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getBorrowRate")
            .original_result()
    }
}
